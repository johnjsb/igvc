<launch>
  <node pkg="usb_cam" type="usb_cam_node" name="left_camera" output="screen">
    <param name="video_device" value="/dev/v4l/by-path/pci-0000:00:14.0-usb-0:1:1.0-video-index0"/>
    <param name="image_width" value="1280"/>
    <param name="image_height" value="720"/>
    <param name="camera_frame_id" value="/left_camera_optical_frame"/>
    <param name="framerate" value="30"/>
    <param name="camera_name" value="left_camera"/>
    <param name="camera_info_url" type="string" value="file://$(find vision)/calibrations/left.yml" />
  </node>

  <node pkg="usb_cam" type="usb_cam_node" name="right_camera" output="screen">
    <param name="video_device" value="/dev/v4l/by-path/pci-0000:00:14.0-usb-0:3:1.0-video-index0"/>
    <param name="image_width" value="1280"/>
    <param name="image_height" value="720"/>
    <param name="camera_frame_id" value="/right_camera_optical_frame"/>
    <param name="framerate" value="30"/>
    <param name="camera_name" value="right_camera"/>
    <param name="camera_info_url" type="string" value="file://$(find vision)/calibrations/right.yml" />
  </node>
  
  <node pkg="ucontroller_tilaunchpad" type="lm4fNode" name="lm4fNode"/>

  <node pkg="imu_vn200" type="imu_vn200_driver.py" name="imu_vn200_driver"/>

  <include file="$(find gps_trimble_driver)/launch/launch.launch"/>

  <!-- producing the odometry and tf transform from the ekf -->
  <node pkg="ekf" type="ekf_node.py" name="ekf_node" output="screen"/>
  
</launch>
